Sublime
	Theme - spark
	bracket Highlighter
	color highlighter
	gitgutter
	emmet
	color picker
	rsub
	sftp
	sublime-EasyMotion

Keybindings
	#Mac
	[
	{ "keys": ["ctrl+tab"], "command": "next_view" },
	{ "keys": ["ctrl+shift+tab"], "command": "prev_view" },
	{ "keys": ["option+b"], "command": "move", "args": {"by": "subwords", "forward": false} },
	{ "keys": ["option+f"], "command": "move", "args": {"by": "subword_ends", "forward": true} },
	{ "keys": ["option+shift+b"], "command": "move", "args": {"by": "subwords", "forward": false, "extend": true} },
	{ "keys": ["option+shift+f"], "command": "move", "args": {"by": "subword_ends", "forward": true, "extend": true} },
	]
	#Linux
	[
	{ "keys": ["ctrl+tab"], "command": "next_view" },
	{ "keys": ["ctrl+shift+tab"], "command": "prev_view" },
	{ "keys": ["alt+b"], "command": "move", "args": {"by": "subwords", "forward": false} },
	{ "keys": ["alt+f"], "command": "move", "args": {"by": "subword_ends", "forward": true} }
	{ "keys": ["alt+shift+b"], "command": "move", "args": {"by": "subwords", "forward": false, "extend": true} },
	{ "keys": ["alt+shift+f"], "command": "move", "args": {"by": "subword_ends", "forward": true, "extend": true} }
	]

Sub Snippet
	<snippet>
		<content><![CDATA[
	console.log(${1});${0}
	]]></content>
		<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
		<tabTrigger>log</tabTrigger>
		<!-- Optional: Set a scope to limit where the snippet will trigger -->
		<!-- <scope>source.python</scope> -->
	</snippet>


Atom
	autocomplete-paths
	easy-motion-redux
	emmet
	file-icons
	minimap
	pigments
	remote-atom
	script
	spark-syntax
	split-diff

Atom Keymappings
'atom-text-editor':
	'alt-;': 'easy-motion-redux:letter' #'cmd-; for Mac'
#For ctrl-tab in order
'body':
  'ctrl-tab ^ctrl': 'unset!'
  'ctrl-tab': 'pane:show-next-item'
  'ctrl-shift-tab ^ctrl': 'unset!'
  'ctrl-shift-tab': 'pane:show-previous-item'

Visual Studio Code Keybindings
[
	{ "key": "shift+ctrl+p", "command": "cursorUpSelect", "when": "editorTextFocus" },
	{ "key": "shift+ctrl+n", "command": "cursorDownSelect", "when": "editorTextFocus" },
	{ "key": "shift+ctrl+f", "command": "cursorRightSelect", "when": "editorTextFocus" },
	{ "key": "shift+ctrl+b", "command": "cursorLeftSelect", "when": "editorTextFocus" },
	{ "key": "alt+f", "command": "cursorWordEndRight", "when": "editorTextFocus" },
	{ "key": "shift+alt+f", "command": "cursorWordEndRightSelect", "when": "editorTextFocus" },
	{ "key": "alt+b", "command": "cursorWordStartLeft", "when": "editorTextFocus" },
	{ "key": "shift+alt+b", "command": "cursorWordStartLeftSelect", "when": "editorTextFocus" },
	{ "key": "shift+ctrl+a", "command": "cursorHomeSelect", "when": "editorTextFocus" },
    { "key": "shift+ctrl+e", "command": "cursorEndSelect", "when": "editorTextFocus" }
	{ "key": "shift+ctrl+p", "command": "cursorUpSelect", "when": "editorTextFocus" },
    { "key": "shift+ctrl+n", "command": "cursorDownSelect", "when": "editorTextFocus" },
    { "key": "shift+ctrl+f", "command": "cursorRightSelect", "when": "editorTextFocus" },
    { "key": "shift+ctrl+b", "command": "cursorLeftSelect", "when": "editorTextFocus" },
    { "key": "alt+f", "command": "cursorWordEndRight", "when": "editorTextFocus" },
    { "key": "shift+alt+f", "command": "cursorWordEndRightSelect", "when": "editorTextFocus" },
    { "key": "alt+b", "command": "cursorWordStartLeft", "when": "editorTextFocus" },
    { "key": "shift+alt+b", "command": "cursorWordStartLeftSelect", "when": "editorTextFocus" },
    { "key": "shift+ctrl+a", "command": "cursorHomeSelect", "when": "editorTextFocus" },
    { "key": "shift+ctrl+e", "command": "cursorEndSelect", "when": "editorTextFocus" },
	{ "key": "ctrl+alt+p", "command": "workbench.action.editor.previousChange", "when": "editorTextFocus" },
	{ "key": "ctrl+alt+n", "command": "workbench.action.editor.nextChange", "when": "editorTextFocus" },
	{ "key": "alt+s alt+j", "command": "workbench.action.splitEditorDown" },
    { "key": "alt+s alt+h", "command": "workbench.action.splitEditorLeft" },
    { "key": "alt+s alt+l", "command": "workbench.action.splitEditorRight" },
    { "key": "alt+s alt+k", "command": "workbench.action.splitEditorUp" },
    { "key": "ctrl+shift+alt+p", "command": "editor.action.dirtydiff.previous", "when": "editorTextFocus" },
	{ "key": "ctrl+shift+alt+n", "command": "editor.action.dirtydiff.next", "when": "editorTextFocus" },
	{ "key": "alt+cmd+b", "command": "editor.action.goToDeclaration", "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
	{ "key": "cmd+k cmd+h", "command": "workbench.action.focusLeftGroup" },
	{ "key": "cmd+k cmd+k", "command": "workbench.action.focusAboveGroup" },
	{ "key": "cmd+k cmd+j", "command": "workbench.action.focusBelowGroup" },
	{ "key": "cmd+k cmd+l", "command": "workbench.action.focusRightGroup" },

	{ "key": "shift+alt+n", "command": "editor.action.moveLinesDownAction" },
    { "key": "shift+alt+p", "command": "editor.action.moveLinesUpAction" },

	// move window to editor group
	{ "key": "alt+s k", "command": "workbench.action.moveEditorToAboveGroup" },
    { "key": "alt+s j", "command": "workbench.action.moveEditorToBelowGroup" },
    { "key": "alt+s h", "command": "workbench.action.moveEditorToLeftGroup" },
    { "key": "alt+s l", "command": "workbench.action.moveEditorToRightGroup" },

	{ "key": "ctrl+tab", "command": "workbench.action.quickOpenPreviousRecentlyUsedEditor", "when": "!inEditorsPicker" },
    { "key": "ctrl+shift+tab", "command": "workbench.action.quickOpenLeastRecentlyUsedEditor", "when": "!inEditorsPicker" },

	{ "key": "alt+d", "command": "editor.action.copyLinesDownAction", "when": "editorTextFocus && !editorReadonly" },
	{ "key": "ctrl+alt+e", "command": "workbench.action.focusActiveEditorGroup" },
	{ "key": "ctrl+alt+t", "command": "workbench.action.terminal.focus" }
]
